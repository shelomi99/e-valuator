# coding: utf-8

"""
    FRED

    FRED is a tool for automatically producing RDF/OWL ontologies and linked data from natural language sentences. The method is based on Combinatory Categorial Grammar, Discourse Representation Theory, Linguistic Frames, and Ontology Design Patterns. Results are enriched with NER and WSD.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def stlab_tools_fred_get(self, text, **kwargs):  # noqa: E501
        """stlab_tools_fred_get  # noqa: E501

        Generate RDF from natural language text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stlab_tools_fred_get(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The input natural language text. (required)
        :param str prefix: The prefix used for the namespace of terms introduced by FRED in the output. If not specified fred: is used as default.
        :param str namespace: The namespace used for the terms introduced by FRED in the output. If not specified http://www.ontologydesignpatterns.org/ont/fred/domain.owl# is used as default.
        :param bool wsd: Perform Word Sense Disambiguation on input terms. By default it is set to false.
        :param bool wfd: Perform Word Frame Disambiguation on input terms in order to provide alignments to WordNet synsets, WordNet Super-senses and Dolce classes. By default it is set to false.
        :param str wfd_profile: The profile associated with the Word Frame Disambiguation
        :param bool tense: Include temporal relations between events according to their grammatical tense. By default it is set to false.
        :param bool roles: Use FrameNet roles into the resulting ontology. By default it is set to false.
        :param str textannotation: The vocabulary used for annotating the text in RDF. Two possible alternatives are available, i.e. EARMARK and NIF.
        :param bool semantic_subgraph: Generate a RDF which only expresses the semantics of a sentence without additional RDF triples, such as those containing text spans, part-of-speeches, etc. By default it is set to false.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stlab_tools_fred_get_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.stlab_tools_fred_get_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def stlab_tools_fred_get_with_http_info(self, text, **kwargs):  # noqa: E501
        """stlab_tools_fred_get  # noqa: E501

        Generate RDF from natural language text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stlab_tools_fred_get_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The input natural language text. (required)
        :param str prefix: The prefix used for the namespace of terms introduced by FRED in the output. If not specified fred: is used as default.
        :param str namespace: The namespace used for the terms introduced by FRED in the output. If not specified http://www.ontologydesignpatterns.org/ont/fred/domain.owl# is used as default.
        :param bool wsd: Perform Word Sense Disambiguation on input terms. By default it is set to false.
        :param bool wfd: Perform Word Frame Disambiguation on input terms in order to provide alignments to WordNet synsets, WordNet Super-senses and Dolce classes. By default it is set to false.
        :param str wfd_profile: The profile associated with the Word Frame Disambiguation
        :param bool tense: Include temporal relations between events according to their grammatical tense. By default it is set to false.
        :param bool roles: Use FrameNet roles into the resulting ontology. By default it is set to false.
        :param str textannotation: The vocabulary used for annotating the text in RDF. Two possible alternatives are available, i.e. EARMARK and NIF.
        :param bool semantic_subgraph: Generate a RDF which only expresses the semantics of a sentence without additional RDF triples, such as those containing text spans, part-of-speeches, etc. By default it is set to false.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'prefix', 'namespace', 'wsd', 'wfd', 'wfd_profile', 'tense', 'roles', 'textannotation', 'semantic_subgraph']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stlab_tools_fred_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `stlab_tools_fred_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'wsd' in params:
            query_params.append(('wsd', params['wsd']))  # noqa: E501
        if 'wfd' in params:
            query_params.append(('wfd', params['wfd']))  # noqa: E501
        if 'wfd_profile' in params:
            query_params.append(('wfd_profile', params['wfd_profile']))  # noqa: E501
        if 'tense' in params:
            query_params.append(('tense', params['tense']))  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
        if 'textannotation' in params:
            query_params.append(('textannotation', params['textannotation']))  # noqa: E501
        if 'semantic_subgraph' in params:
            query_params.append(('semantic-subgraph', params['semantic_subgraph']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/rdf+xml', 'text/turtle', 'application/rdf+json', 'text/rdf+n3', 'text/rdf+nt', 'image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer 06d0bc6e-9fec-3e8c-b862-34136ca9331e']  # noqa: E501

        return self.api_client.call_api(
            '/stlab-tools/fred', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
